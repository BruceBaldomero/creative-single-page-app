{"version":3,"sources":["comps/Title.js","firebase/config.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","App.js","index.js"],"names":["Title","className","firebase","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","div","initial","width","animate","UploadForm","types","password","setPassword","isAuthenticated","setIsAuthenticated","type","onChange","e","selected","target","files","includes","onClick","style","marginTop","placeholder","value","required","preventDefault","alert","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","map","key","layout","whileHover","opacity","s","img","src","alt","transition","delay","Modal","selectedImg","classList","contains","y","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6c0e0a5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Title = () => {\r\n  return (\r\n    <div className=\"title\">\r\n      {/*<h1>INSPIRE</h1>*/}\r\n      <h2>INSPIRE</h2>\r\n      <p>UPLOAD CREATIVE WORK TO INSPIRE OTHERS</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Title;","import * as firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyBuY1jjdNPS6oW5PMpqwO7_2ZgL55KNfGI\",\r\n  authDomain: \"creativeappjoe.firebaseapp.com\",\r\n  projectId: \"creativeappjoe\",\r\n  storageBucket: \"creativeappjoe.appspot.com\",\r\n  messagingSenderId: \"92514853130\",\r\n  appId: \"1:92514853130:web:cc5ee848c5298a6fc9daf3\",\r\n  measurementId: \"G-T7ELE7X6WX\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport { projectStorage, projectFirestore, timestamp };","import { useState, useEffect } from 'react';\r\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config';\r\n\r\nconst useStorage = (file) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  const [url, setUrl] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // references\r\n    const storageRef = projectStorage.ref(file.name);\r\n    const collectionRef = projectFirestore.collection('images');\r\n    \r\n    storageRef.put(file).on('state_changed', (snap) => {\r\n      let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n      setProgress(percentage);\r\n    }, (err) => {\r\n      setError(err);\r\n    }, async () => {\r\n      const url = await storageRef.getDownloadURL();\r\n      const createdAt = timestamp();\r\n      await collectionRef.add({ url, createdAt });\r\n      setUrl(url);\r\n    });\r\n  }, [file]);\r\n\r\n  return { progress, url, error };\r\n}\r\n\r\nexport default useStorage;","import React, { useEffect } from 'react';\r\nimport useStorage from '../hooks/useStorage';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst ProgressBar = ({ file, setFile }) => {\r\n  const { progress, url } = useStorage(file);\r\n\r\n  useEffect(() => {\r\n    if (url) {\r\n      setFile(null);\r\n    }\r\n  }, [url, setFile]);\r\n\r\n  return (\r\n    <motion.div className=\"progress-bar\"\r\n      initial={{ width: 0 }}\r\n      animate={{ width: progress + '%' }}\r\n    ></motion.div>\r\n  );\r\n} \r\n\r\nexport default ProgressBar;","import React, { useState } from 'react';\r\nimport ProgressBar from './ProgressBar';\r\n\r\nconst UploadForm = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const types = ['image/png', 'image/jpeg'];\r\n\r\n  // --- NEW CODE START ---\r\n  // State to manage the password input\r\n  const [password, setPassword] = useState('');\r\n  // State to track if the user has entered the correct password\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  // =========================================================\r\n  // !!! IMPORTANT: THIS PASSWORD IS VISIBLE IN YOUR CODE !!!\r\n  // =========================================================\r\n  // Replace 'YourSecretPasswordHere' with the password you want to set.\r\n  const CORRECT_PASSWORD = 'medicollective'; // CHANGE THIS PASSWORD!\r\n\r\n  const handlePasswordChange = (e) => {\r\n    setPassword(e.target.value);\r\n  };\r\n\r\n  const handlePasswordSubmit = (e) => {\r\n    e.preventDefault(); // Prevents the form from causing a page reload\r\n    if (password === CORRECT_PASSWORD) {\r\n      setIsAuthenticated(true);\r\n      setPassword(''); // Clear the password input after successful entry\r\n      alert('UPLOAD UNLOCKED!'); // Provide feedback to the user\r\n    } else {\r\n      alert('INCORRECT PASSWORD, PLEASE TRY AGAIN.'); // Alert the user if the password is wrong\r\n      setError('INCORRECT PASSWORD.'); // Set an error state for display if you like\r\n      setPassword(''); // Clear the password input after failed attempt\r\n    }\r\n  };\r\n  // --- NEW CODE END ---\r\n\r\n  const handleChange = (e) => {\r\n    let selected = e.target.files[0];\r\n\r\n    if (selected && types.includes(selected.type)) {\r\n      setFile(selected);\r\n      setError('');\r\n    } else {\r\n      setFile(null);\r\n      setError('Please select an image file (png or jpg)');\r\n    }\r\n  };\r\n\r\n  return (\r\n    // --- NEW CODE START: Conditional Rendering ---\r\n    <form>\r\n      {!isAuthenticated ? (\r\n        // IF NOT AUTHENTICATED: Show the password input form\r\n        <div className=\"password-lock-container\">\r\n          {/*<p>ENTER PASSWORD TO ENABLE UPLOADS:</p>*/}\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"PASSWORD\"\r\n            value={password}\r\n            onChange={handlePasswordChange}\r\n            required\r\n          />\r\n          <button type=\"submit\" onClick={handlePasswordSubmit}>&#10140;</button>\r\n          {error && <div className=\"error\">{error}</div>} {/* Display error if password is wrong */}\r\n        </div>\r\n      ) : (\r\n        // IF AUTHENTICATED: Show your original upload controls\r\n        <>\r\n          <label>\r\n            <input type=\"file\" onChange={handleChange} />\r\n            <span>+</span>\r\n          </label>\r\n          <div className=\"output\">\r\n            { error && <div className=\"error\">{ error }</div>}\r\n            { file && <div>{ file.name }</div> }\r\n            { file && <ProgressBar file={file} setFile={setFile} /> }\r\n          </div>\r\n          {/* Optional: Add a button to re-lock the upload if needed */}\r\n          <button onClick={() => setIsAuthenticated(false)} style={{marginTop: '10px'}}>LOCK UPLOAD</button>\r\n        </>\r\n      )}\r\n    </form>\r\n    // --- NEW CODE END: Conditional Rendering ---\r\n  );\r\n}\r\n\r\nexport default UploadForm;","import { useState, useEffect } from 'react';\r\nimport { projectFirestore } from '../firebase/config';\r\n\r\nconst useFirestore = (collection) => {\r\n  const [docs, setDocs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const unsub = projectFirestore.collection(collection)\r\n      .orderBy('createdAt', 'desc')\r\n      .onSnapshot(snap => {\r\n        let documents = [];\r\n        snap.forEach(doc => {\r\n          documents.push({...doc.data(), id: doc.id});\r\n        });\r\n        setDocs(documents);\r\n      });\r\n\r\n    return () => unsub();\r\n  }, [collection]);\r\n\r\n  return { docs };\r\n}\r\n\r\nexport default useFirestore;","import React from 'react';\r\nimport useFirestore from '../hooks/useFirestore';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst ImageGrid = ({ setSelectedImg }) => {\r\n  const { docs } = useFirestore('images');\r\n\r\n  return (\r\n    <div className=\"img-grid\">\r\n      {docs && docs.map(doc => (\r\n        <motion.div className=\"img-wrap\" key={doc.id} \r\n          layout\r\n          whileHover={{ opacity: 1 }}s\r\n          onClick={() => setSelectedImg(doc.url)}\r\n        >\r\n          <motion.img src={doc.url} alt=\"uploaded pic\"\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            transition={{ delay: 1 }}\r\n          />\r\n        </motion.div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ImageGrid;","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst Modal = ({ setSelectedImg, selectedImg }) => {\r\n\r\n  const handleClick = (e) => {\r\n    if (e.target.classList.contains('backdrop')) {\r\n      setSelectedImg(null);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <motion.div className=\"backdrop\" onClick={handleClick}\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n    >\r\n      <motion.img src={selectedImg} alt=\"enlarged pic\" \r\n        initial={{ y: \"-100vh\" }}\r\n        animate={{ y: 0 }}\r\n      />\r\n    </motion.div>\r\n  )\r\n}\r\n\r\nexport default Modal;","import React, { useState } from 'react';\r\nimport Title from './comps/Title';\r\nimport UploadForm from './comps/UploadForm';\r\nimport ImageGrid from './comps/ImageGrid';\r\nimport Modal from './comps/Modal';\r\n\r\nfunction App() {\r\n  const [selectedImg, setSelectedImg] = useState(null);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Title/>\r\n      <UploadForm />\r\n      <ImageGrid setSelectedImg={setSelectedImg} />\r\n      { selectedImg && (\r\n        <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}